"""
Django settings for ecommerce_tool project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from corsheaders.defaults import default_headers

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True

# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://192.168.30.191:4200",
    "https://b2bop.netlify.app"
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://192.168.30.191:4200",
    "https://b2bop.netlify.app"
]
#CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'content-type',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    "rest_framework_simplejwt",
    'django_celery_beat',
    'omnisight'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ecommerce_tool.custom_mideleware.customMiddleware' #custom middle ware
]

ROOT_URLCONF = 'ecommerce_tool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce_tool.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME': os.getenv('DATABASE_NAME'),  # Change to your database name
#         'CLIENT': {
#             'host': os.getenv('DATABASE_HOST'),  # Change if using a remote MongoDB
#             # 'username': os.getenv('DATABASE_USER'),  # Remove if not using authentication
#             # 'password': os.getenv('DATABASE_PASSWORD'),
#             # 'authSource': 'admin',  # Required if using authentication
#         }
#     }
# }

# MongoDB connection settings for mongoengine
from mongoengine import connect

connect(
    db=os.getenv('DATABASE_NAME'),
    # username=os.getenv('DATABASE_USER'),
    # password=os.getenv('DATABASE_PASSWORD'),
    host=os.getenv('DATABASE_HOST'),
    # alias='default'
)



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.TokenAuthentication',
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),
# }




# Read API keys
#WALMART API KEYS
WALMART_API_KEY = os.getenv('WALMART_API_KEY')
WALMART_SECRET_KEY = os.getenv('WALMART_SECRET_KEY')

#AMAZON API KEYS
AMAZON_API_KEY = os.getenv('AMAZON_API_KEY')
AMAZON_SECRET_KEY = os.getenv('AMAZON_SECRET_KEY')
REFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')
MARKETPLACE_ID = os.getenv('MARKETPLACE_ID')
SELLER_ID = os.getenv('SELLER_ID')


#SENDGRID API KEYS
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')

# Sellercloud API credentials
SELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')
SELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')
SELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID
SELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')



CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
