[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "crontab",
        "importPath": "celery.schedules",
        "description": "celery.schedules",
        "isExtraImport": true,
        "detail": "celery.schedules",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "SENDGRID_API_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "AMAZON_API_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "AMAZON_SECRET_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLER_ID",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SENDGRID_API_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "MARKETPLACE_ID",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLER_ID",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "WALMART_API_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "WALMART_SECRET_KEY",
        "importPath": "ecommerce_tool.settings",
        "description": "ecommerce_tool.settings",
        "isExtraImport": true,
        "detail": "ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SendGridAPIClient",
        "importPath": "sendgrid",
        "description": "sendgrid",
        "isExtraImport": true,
        "detail": "sendgrid",
        "documentation": {}
    },
    {
        "label": "SendGridAPIClient",
        "importPath": "sendgrid",
        "description": "sendgrid",
        "isExtraImport": true,
        "detail": "sendgrid",
        "documentation": {}
    },
    {
        "label": "Mail",
        "importPath": "sendgrid.helpers.mail",
        "description": "sendgrid.helpers.mail",
        "isExtraImport": true,
        "detail": "sendgrid.helpers.mail",
        "documentation": {}
    },
    {
        "label": "Mail",
        "importPath": "sendgrid.helpers.mail",
        "description": "sendgrid.helpers.mail",
        "isExtraImport": true,
        "detail": "sendgrid.helpers.mail",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "importPath": "ecommerce_tool.crud",
        "description": "ecommerce_tool.crud",
        "isExtraImport": true,
        "detail": "ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "ignore_api_functions",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "authenticated_api",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "access_token",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Marketplace",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "OrderItems",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Marketplace",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "CityDetails",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "user",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "notes_data",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "chooseMatrix",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Fee",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Refund",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Brand",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "inventry_log",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "productPriceChange",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "pageview_session_count",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "OrderItems",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Marketplace",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "access_token",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "Marketplace",
        "importPath": "omnisight.models",
        "description": "omnisight.models",
        "isExtraImport": true,
        "detail": "omnisight.models",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "default_headers",
        "importPath": "corsheaders.defaults",
        "description": "corsheaders.defaults",
        "isExtraImport": true,
        "detail": "corsheaders.defaults",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "IntField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "DictField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "ListField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "EmbeddedDocument",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "EmbeddedDocumentField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "ReferenceField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "importPath": "ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.custom_mideleware",
        "isExtraImport": true,
        "detail": "ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "createJsonResponse",
        "importPath": "ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.custom_mideleware",
        "isExtraImport": true,
        "detail": "ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "createCookies",
        "importPath": "ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.custom_mideleware",
        "isExtraImport": true,
        "detail": "ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.custom_mideleware",
        "isExtraImport": true,
        "detail": "ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.middleware",
        "description": "django.middleware",
        "isExtraImport": true,
        "detail": "django.middleware",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "openpyxl.drawing.image",
        "description": "openpyxl.drawing.image",
        "isExtraImport": true,
        "detail": "openpyxl.drawing.image",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "emoji",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emoji",
        "description": "emoji",
        "detail": "emoji",
        "documentation": {}
    },
    {
        "label": "getAccesstoken",
        "importPath": "omnisight.operations.walmart_utils",
        "description": "omnisight.operations.walmart_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.walmart_utils",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "get_date_range",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "convertLocalTimeToUTC",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "convertdateTotimezone",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "calculate_metricss",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_date_range",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "grossRevenue",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_previous_periods",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "refundOrder",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "AnnualizedRevenueAPIView",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getOrdersListBasedonProductId",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getproductIdListBasedonbrand",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getdaywiseproductssold",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "pageViewsandSessionCount",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getproductIdListBasedonManufacture",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "totalRevenueCalculation",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "totalRevenueCalculationForProduct",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_top_movers",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "convertLocalTimeToUTC",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "convertdateTotimezone",
        "importPath": "omnisight.operations.helium_utils",
        "description": "omnisight.operations.helium_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "mongoengine.queryset.visitor",
        "description": "mongoengine.queryset.visitor",
        "isExtraImport": true,
        "detail": "mongoengine.queryset.visitor",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "SON",
        "importPath": "bson.son",
        "description": "bson.son",
        "isExtraImport": true,
        "detail": "bson.son",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "monthrange",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "calculate_listing_score",
        "importPath": "omnisight.operations.common_utils",
        "description": "omnisight.operations.common_utils",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_utils",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "mongoengine.errors",
        "description": "mongoengine.errors",
        "isExtraImport": true,
        "detail": "mongoengine.errors",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "checkEmailExistOrNot",
        "importPath": "omnisight.operations.common_operations",
        "description": "omnisight.operations.common_operations",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "signupUser",
        "importPath": "omnisight.operations.common_operations",
        "description": "omnisight.operations.common_operations",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "loginUser",
        "importPath": "omnisight.operations.common_operations",
        "description": "omnisight.operations.common_operations",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "forgotPassword",
        "importPath": "omnisight.operations.common_operations",
        "description": "omnisight.operations.common_operations",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "changePassword",
        "importPath": "omnisight.operations.common_operations",
        "description": "omnisight.operations.common_operations",
        "isExtraImport": true,
        "detail": "omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "getMarketplaceList",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductList",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductCategoryList",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getBrandList",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchProductDetails",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchAllorders",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchOrderDetails",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "ordersCountForDashboard",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "totalSalesAmount",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getOrdersBasedOnProduct",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "createManualOrder",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductListForOrdercreation",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "listManualOrders",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchManualOrderDetails",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getSalesTrendPercentage",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchSalesSummary",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "salesAnalytics",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "mostSellingProducts",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchTopSellingCategories",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "updateManualOrder",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchInventryList",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "exportOrderReport",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "createUser",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "listUsers",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchUserDetails",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchRoles",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductVariant",
        "importPath": "omnisight.operations.general_functions",
        "description": "omnisight.operations.general_functions",
        "isExtraImport": true,
        "detail": "omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "get_metrics_by_date_range",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "LatestOrdersTodayAPIView",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "RevenueWidgetAPIView",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_top_products",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseData",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseDataCustom",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseDataXl",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "exportPeriodWiseCSV",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "allMarketplaceData",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "allMarketplaceDataxl",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadMarketplaceDataCSV",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProductPerformanceSummary",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadProductPerformanceSummary",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadProductPerformanceCSV",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_products_with_pagination",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profit_loss_chart",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProfitAndLossDetails",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitLossExportXl",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitLossChartCsv",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "ListingOptimizationView",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "obtainChooseMatrix",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updateChooseMatrix",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "InsightsDashboardView",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getSKUlist",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getproductIdlist",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "InsightsProductWise",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getCitywiseSales",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "exportCitywiseSalesExcel",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadCitywiseSalesCSV",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "obtainManufactureNames",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getBrandListforfilter",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsDetailsPageSummary",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsSalesOverview",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsListingQualityScore",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsTrafficandConversions",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProfitAndLossDetailsForProduct",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitlosschartForProduct",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getrevenuedetailsForProduct",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getInventryLogForProductdaywise",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProductInformation",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updatedRevenueWidgetAPIView",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updateProductDetails",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productUnitProfitability",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productNetprofit",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "cogsGraph",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "priceGraph",
        "importPath": "omnisight.operations.helium_dashboard",
        "description": "omnisight.operations.helium_dashboard",
        "isExtraImport": true,
        "detail": "omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.asgi",
        "description": "ecommerce_tool.ecommerce_tool.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ecommerce_tool.ecommerce_tool.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.celery",
        "description": "ecommerce_tool.ecommerce_tool.celery",
        "peekOfCode": "app = Celery(\n    'ecommerce_tool',\n    broker='redis://localhost:6379/0',  # Redis as the broker\n    backend='redis://localhost:6379/0',  # Optional: Redis for result storage\n)\n# Load task modules from Django settings\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Auto-discover tasks from Django apps\napp.autodiscover_tasks()\nfrom celery.schedules import crontab",
        "detail": "ecommerce_tool.ecommerce_tool.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.beat_schedule",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.celery",
        "description": "ecommerce_tool.ecommerce_tool.celery",
        "peekOfCode": "app.conf.beat_schedule = {\n    'sync-orders-every-20-minutes': {\n        'task': 'omnisight.tasks.sync_orders',\n        'schedule': crontab(minute='2,22,42'),\n    },\n    'sync-walmart_orders-every-15-minutes': {\n        'task': 'omnisight.tasks.sync_walmart_orders',\n        'schedule': crontab(minute='0,15,30,45'),\n    },\n    'sync-inventry-every-hour': {",
        "detail": "ecommerce_tool.ecommerce_tool.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.timezone",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.celery",
        "description": "ecommerce_tool.ecommerce_tool.celery",
        "peekOfCode": "app.conf.timezone = 'UTC'",
        "detail": "ecommerce_tool.ecommerce_tool.celery",
        "documentation": {}
    },
    {
        "label": "DatabaseModel",
        "kind": 6,
        "importPath": "ecommerce_tool.ecommerce_tool.crud",
        "description": "ecommerce_tool.ecommerce_tool.crud",
        "peekOfCode": "class DatabaseModel():\n    def get_document(queryset,filter={},field_list=[]):\n        data = queryset(**filter).limit(1).only(*field_list)\n        if len(data):\n            data = data[0]\n        else:\n            data = None\n        return data\n    def list_documents(queryset,filter={},field_list=[],sort_list = [],lower_limit = None, upper_limit = None):\n        data = queryset(**filter).skip(lower_limit).limit(upper_limit - lower_limit if lower_limit != None and upper_limit != None else None).only(*field_list).order_by(*sort_list)",
        "detail": "ecommerce_tool.ecommerce_tool.crud",
        "documentation": {}
    },
    {
        "label": "customMiddleware",
        "kind": 6,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "class customMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    @skip_for_paths()\n    def __call__(self, request):\n        response = createJsonResponse(request)\n        if not checkAuthentication(request):\n            response.status_code = status.HTTP_401_UNAUTHORIZED\n            response.data['message'] = 'Permission denied'\n            response.accepted_renderer = JSONRenderer()",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "obtainManufactureIdFromToken",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def obtainManufactureIdFromToken(request): \n    token = request.COOKIES.get('authentication_token', \"\")\n    validationObjJWT = None\n    try:\n        validationObjJWT = jwt.decode(token, SIMPLE_JWT['SIGNING_KEY'], algorithms=[SIMPLE_JWT['ALGORITHM']])\n        return validationObjJWT['manufacture_unit_id']\n    except Exception as e:\n        return validationObjJWT\ndef obtainUserIdFromToken(request): \n    token = request.COOKIES.get('authentication_token', \"\")",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "obtainUserIdFromToken",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def obtainUserIdFromToken(request): \n    token = request.COOKIES.get('authentication_token', \"\")\n    validationObjJWT = None\n    try:\n        validationObjJWT = jwt.decode(token, SIMPLE_JWT['SIGNING_KEY'], algorithms=[SIMPLE_JWT['ALGORITHM']])\n        return validationObjJWT['id']\n    except Exception as e:\n        return validationObjJWT\ndef obtainUserRoleFromToken(request): \n    token = request.COOKIES.get('authentication_token', \"\")",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "obtainUserRoleFromToken",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def obtainUserRoleFromToken(request): \n    token = request.COOKIES.get('authentication_token', \"\")\n    validationObjJWT = None\n    try:\n        validationObjJWT = jwt.decode(token, SIMPLE_JWT['SIGNING_KEY'], algorithms=[SIMPLE_JWT['ALGORITHM']])\n        return validationObjJWT['role_name']\n    except Exception as e:\n        return validationObjJWT\ndef skip_for_paths():\n    \"\"\"",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "skip_for_paths",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def skip_for_paths():\n    \"\"\"\n    decorator for skipping middleware based on path\n    \"\"\"\n    def decorator(f):\n        def check_if_health(self, request):\n            path = request.path.split(\"/\")\n            ignore_function = DatabaseModel.get_document(ignore_api_functions.objects,{\"name__in\" : path})\n            if ignore_function:\n                response = self.get_response(request)",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "createJsonResponse",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def createJsonResponse(request, token = None):\n    authentication_token = ''\n    if token:\n        header,payload1,signature = str(token).split(\".\")\n        authentication_token = header+'.'+payload1\n    else:\n        authentication_token = request.COOKIES.get('authentication_token', \"\").split(\".\")[0]\n    data_map = dict()\n    data_map['data'] = dict()\n    response = Response(content_type = 'application/json') ",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "createCookies",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def createCookies(token,response):\n    response.set_cookie(\n        key = \"authentication_token\",\n        value = token,\n        max_age = SIMPLE_JWT['SESSION_COOKIE_MAX_AGE'],\n        secure = SIMPLE_JWT['AUTH_COOKIE_SECURE'],\n        httponly = True,\n        samesite = SIMPLE_JWT['AUTH_COOKIE_SAMESITE'],\n        # domain = SIMPLE_JWT['SESSION_COOKIE_DOMAIN'],\n    )",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "check_authentication",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def check_authentication(request):\n    token = request.COOKIES.get('authentication_token', \"\")\n    validationObjJWT = None\n    try:\n        validationObjJWT = jwt.decode(token, SIMPLE_JWT['SIGNING_KEY'], algorithms=[SIMPLE_JWT['ALGORITHM']])\n        return validationObjJWT\n    except Exception as e:\n        return validationObjJWT\ndef refresh_cookies(request,response):\n    token = request.COOKIES.get('authentication_token', \"\")",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "refresh_cookies",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def refresh_cookies(request,response):\n    token = request.COOKIES.get('authentication_token', \"\")\n    createCookies(token, response)\nimport json\n@csrf_exempt\ndef checkAuthentication(request):\n    path = request.path.split(\"/\")\n    user_id = None\n    if request.method == \"POST\":\n        if not request.body:",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "checkAuthentication",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def checkAuthentication(request):\n    path = request.path.split(\"/\")\n    user_id = None\n    if request.method == \"POST\":\n        if not request.body:\n            return False\n        try:\n            data = json.loads(request.body.decode(\"utf-8\"))  # Manually parse JSON\n            user_id = data.get(\"user_id\")\n        except json.JSONDecodeError as e:",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "def send_email(to_email, subject, body):\n    message = Mail(\n        from_email='contactdigicommerce@gmail.com',\n        to_emails=to_email,\n        subject=subject,\n        plain_text_content=body,\n    )\n    try:\n        sg = SendGridAPIClient(SENDGRID_API_KEY)\n        response = sg.send(message)",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "description": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "peekOfCode": "SIMPLE_JWT = {\n  'ACCESS_TOKEN_LIFETIME': timedelta(minutes=500),\n  'ALGORITHM': 'HS256',\n  'SIGNING_KEY': settings.SECRET_KEY,\n  'SESSION_COOKIE_DOMAIN' : '192.168.30.148',\n  'SESSION_COOKIE_MAX_AGE' : 12000000,\n  'AUTH_COOKIE': 'access_token',  # Cookie name. Enables cookies if value is set.\n  'AUTH_COOKIE_SECURE': True,    # Whether the auth cookies should be secure (https:// only).\n  'AUTH_COOKIE_SAMESITE': 'None',  # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or 'None' to disable the flag.\n}",
        "detail": "ecommerce_tool.ecommerce_tool.custom_mideleware",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# CORS Configuration - FIXED\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# CORS Configuration - FIXED\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Alternative: Use specific origins instead of CORS_ALLOW_ALL_ORIGINS = True\n# If you want to be more specific, comment out CORS_ALLOW_ALL_ORIGINS above and uncomment below:\n# CORS_ALLOW_ALL_ORIGINS = False",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# CORS Configuration - FIXED\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Alternative: Use specific origins instead of CORS_ALLOW_ALL_ORIGINS = True\n# If you want to be more specific, comment out CORS_ALLOW_ALL_ORIGINS above and uncomment below:\n# CORS_ALLOW_ALL_ORIGINS = False\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://34.195.154.218\",",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# CORS Configuration - FIXED\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Alternative: Use specific origins instead of CORS_ALLOW_ALL_ORIGINS = True\n# If you want to be more specific, comment out CORS_ALLOW_ALL_ORIGINS above and uncomment below:\n# CORS_ALLOW_ALL_ORIGINS = False\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://34.195.154.218\",\n#     \"http://localhost:3000\",",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Alternative: Use specific origins instead of CORS_ALLOW_ALL_ORIGINS = True\n# If you want to be more specific, comment out CORS_ALLOW_ALL_ORIGINS above and uncomment below:\n# CORS_ALLOW_ALL_ORIGINS = False\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://34.195.154.218\",\n#     \"http://localhost:3000\",\n#     \"http://192.168.30.191:4200\",\n#     \"https://b2bop.netlify.app\"",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Alternative: Use specific origins instead of CORS_ALLOW_ALL_ORIGINS = True\n# If you want to be more specific, comment out CORS_ALLOW_ALL_ORIGINS above and uncomment below:\n# CORS_ALLOW_ALL_ORIGINS = False\n# CORS_ALLOWED_ORIGINS = [\n#     \"http://34.195.154.218\",\n#     \"http://localhost:3000\",\n#     \"http://192.168.30.191:4200\",\n#     \"https://b2bop.netlify.app\"\n# ]",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:3000\",\n     \"http://34.195.154.218\",\n    \"http://34.195.154.218\",\n    \"http://192.168.30.191:4200\",\n    \"https://b2bop.netlify.app\"\n]\nCORS_ALLOW_HEADERS = list(default_headers) + [\n    'content-type',\n    'authorization',",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = list(default_headers) + [\n    'content-type',\n    'authorization',\n    'x-requested-with',\n    'accept',\n    'origin',\n    'user-agent',\n    'x-csrftoken',\n]\nCORS_ALLOW_METHODS = [",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    \"rest_framework_simplejwt\",",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',  # MUST be first\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'ecommerce_tool.custom_mideleware.customMiddleware'  # custom middleware",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "ROOT_URLCONF = 'ecommerce_tool.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "WSGI_APPLICATION = 'ecommerce_tool.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'djongo',\n#         'NAME': os.getenv('DATABASE_NAME'),  # Change to your database name\n#         'CLIENT': {\n#             'host': os.getenv('DATABASE_HOST'),  # Change if using a remote MongoDB\n#             # 'username': os.getenv('DATABASE_USER'),  # Remove if not using authentication",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST_FRAMEWORK = {",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST_FRAMEWORK = {\n#     'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST_FRAMEWORK = {\n#     'DEFAULT_AUTHENTICATION_CLASSES': (\n#         'rest_framework.authentication.SessionAuthentication',",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST_FRAMEWORK = {\n#     'DEFAULT_AUTHENTICATION_CLASSES': (\n#         'rest_framework.authentication.SessionAuthentication',\n#         'rest_framework.authentication.TokenAuthentication',\n#         \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n#     ),",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST_FRAMEWORK = {\n#     'DEFAULT_AUTHENTICATION_CLASSES': (\n#         'rest_framework.authentication.SessionAuthentication',\n#         'rest_framework.authentication.TokenAuthentication',\n#         \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n#     ),\n#     'DEFAULT_PERMISSION_CLASSES': (\n#         'rest_framework.permissions.IsAuthenticated',\n#     ),",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "WALMART_API_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "WALMART_API_KEY = os.getenv('WALMART_API_KEY')\nWALMART_SECRET_KEY = os.getenv('WALMART_SECRET_KEY')\n# AMAZON API KEYS\nAMAZON_API_KEY = os.getenv('AMAZON_API_KEY')\nAMAZON_SECRET_KEY = os.getenv('AMAZON_SECRET_KEY')\nREFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')\nMARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "WALMART_SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "WALMART_SECRET_KEY = os.getenv('WALMART_SECRET_KEY')\n# AMAZON API KEYS\nAMAZON_API_KEY = os.getenv('AMAZON_API_KEY')\nAMAZON_SECRET_KEY = os.getenv('AMAZON_SECRET_KEY')\nREFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')\nMARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "AMAZON_API_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "AMAZON_API_KEY = os.getenv('AMAZON_API_KEY')\nAMAZON_SECRET_KEY = os.getenv('AMAZON_SECRET_KEY')\nREFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')\nMARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "AMAZON_SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "AMAZON_SECRET_KEY = os.getenv('AMAZON_SECRET_KEY')\nREFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')\nMARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "REFRESH_TOKEN = os.getenv('AMAZON_REFRESH_TOKEN')\nMARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "MARKETPLACE_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "MARKETPLACE_ID = os.getenv('MARKETPLACE_ID')\nSELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLER_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SELLER_ID = os.getenv('SELLER_ID')\nRole_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "Role_ARN",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "Role_ARN = os.getenv('Role_ARN')\nAcccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "Acccess_Key",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "Acccess_Key = os.getenv('Acccess_Key')\nSecret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "Secret_Access_Key",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "Secret_Access_Key = os.getenv('Secret_Access_Key')\n# SENDGRID API KEYS\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SENDGRID_API_KEY",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\n# Sellercloud API credentials\nSELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLERCLOUD_USERNAME",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SELLERCLOUD_USERNAME = os.getenv('SELLERCLOUD_USERNAME')\nSELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLERCLOUD_PASSWORD",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SELLERCLOUD_PASSWORD = os.getenv('SELLERCLOUD_PASSWORD')\nSELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLERCLOUD_COMPANY_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SELLERCLOUD_COMPANY_ID = os.getenv('SELLERCLOUD_COMPANY_ID')  # Replace with your actual company ID\nSELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "SELLERCLOUD_SERVER_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "SELLERCLOUD_SERVER_ID = os.getenv('SELLERCLOUD_SERVER_ID')  # Replace with your actual server ID\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change if using RabbitMQ\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.settings",
        "description": "ecommerce_tool.ecommerce_tool.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'",
        "detail": "ecommerce_tool.ecommerce_tool.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.urls",
        "description": "ecommerce_tool.ecommerce_tool.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('omnisight/', include('omnisight.urls')),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "ecommerce_tool.ecommerce_tool.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce_tool.ecommerce_tool.wsgi",
        "description": "ecommerce_tool.ecommerce_tool.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerce_tool.ecommerce_tool.wsgi",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def get_access_token():\n    TOKEN_URL = \"https://api.amazon.com/auth/o2/token\"\n    \"\"\"Retrieve access token using refresh token.\"\"\"\n    payload = {\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": REFRESH_TOKEN,\n        \"client_id\": AMAZON_API_KEY,\n        \"client_secret\": AMAZON_SECRET_KEY\n    }\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "getAccesstoken",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def getAccesstoken(user_id):\n    marketplace_id = DatabaseModel.get_document(Marketplace.objects,{\"name\" : \"Amazon\"},['id']).id\n    exist_access_token_obj = DatabaseModel.get_document(access_token.objects,{\"user_id\" : user_id,\"marketplace_id\" : marketplace_id},['access_token_str','updation_time'])\n    if exist_access_token_obj != None:\n        # Get the current time\n        current_time = datetime.now()\n        # Get the creation time of the access token\n        creation_time = exist_access_token_obj.updation_time\n        # Check if the current time is greater than the creation time plus 14 minutes\n        if current_time < creation_time + timedelta(minutes=59):",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization\n        payload = {\n            'grant_type': 'client_credentials',\n            'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET,\n            'scope': 'sellingpartnerapi::reports' \n        }",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "request_report",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def request_report(report_type=\"GET_FLAT_FILE_ORDERS_DATA\"):\n    \"\"\"Request a report.\"\"\"\n    # For most reports, use the regular auth\n    access_token = get_access_token(grantless=False)\n    if not access_token:\n        return None\n    headers = {\n        'x-amz-access-token': access_token,\n        'Content-Type': 'application/json'\n    }",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "check_report_status",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def check_report_status(report_id):\n    \"\"\"Check the status of a report.\"\"\"\n    access_token = get_access_token()\n    if not access_token:\n        return None\n    headers = {\n        'x-amz-access-token': access_token\n    }\n    response = requests.get(\n        f\"{SP_API_ENDPOINT}/reports/2020-09-04/reports/{report_id}\",",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "get_report_document",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def get_report_document(document_id):\n    \"\"\"Get the report document.\"\"\"\n    access_token = get_access_token()\n    if not access_token:\n        return None\n    headers = {\n        'x-amz-access-token': access_token\n    }\n    response = requests.get(\n        f\"{SP_API_ENDPOINT}/reports/2020-09-04/documents/{document_id}\",",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "get_amazon_report",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "def get_amazon_report():\n    # Try different report types until one works\n    report_types = [\n        \"GET_FLAT_FILE_OPEN_LISTINGS_DATA\",  # Catalog inventory\n        \"GET_MERCHANT_LISTINGS_ALL_DATA\",    # Detailed inventory\n        \"GET_FLAT_FILE_ORDERS_DATA\",         # Order data\n        \"GET_TRAFFIC_REPORT\"                 # Traffic data (your original request)\n    ]\n    report_id = None\n    for report_type in report_types:",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "CLIENT_ID = \"amzn1.application-oa2-client.dd341f4b454b44ffa569334a60332762\"\nCLIENT_SECRET = \"amzn1.oa2-cs.v1.bea7c499c5b8a4ee86c138ee474d5bb64706d74f5e67fde0f4b4d3e65917c10a\"\nREFRESH_TOKEN = \"Atzr|IwEBIL9SYl71vJBdgX3s44ryAJ8nWxGkaL-dZ-0ppOMTYoyVwHP8TOVS7VP0-9CgcaKks8GxeYouft6_eBtVYnDhDiRG11k96dHy6qoGM4LIpi5K_KQehTGJT1bVKsgBP6f6bgwq1vAwk9GEUiTcGBaLS9RVBqL2BIFUgUZ0az8zDLmpEqkhKA-vWyf0JFxivFcVkbtaMOZ4zwjE-Or6mnxlhxp24w5CNPU_00tFKSOJyIWdmEbdcju6v4eZm3VdRqjbXYI7Yr9IEkxd_apRdNIcykM_ukWROjARdrH5SLhTh_74n2T6tLsK35bmN5IMdgyekzg\"\nMARKETPLACE_ID = \"ATVPDKIKX0DER\"\nSELLER_ID = \"ADBBQREI9OKOD\"\n# SP-API endpoint for US marketplace\nSP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "CLIENT_SECRET = \"amzn1.oa2-cs.v1.bea7c499c5b8a4ee86c138ee474d5bb64706d74f5e67fde0f4b4d3e65917c10a\"\nREFRESH_TOKEN = \"Atzr|IwEBIL9SYl71vJBdgX3s44ryAJ8nWxGkaL-dZ-0ppOMTYoyVwHP8TOVS7VP0-9CgcaKks8GxeYouft6_eBtVYnDhDiRG11k96dHy6qoGM4LIpi5K_KQehTGJT1bVKsgBP6f6bgwq1vAwk9GEUiTcGBaLS9RVBqL2BIFUgUZ0az8zDLmpEqkhKA-vWyf0JFxivFcVkbtaMOZ4zwjE-Or6mnxlhxp24w5CNPU_00tFKSOJyIWdmEbdcju6v4eZm3VdRqjbXYI7Yr9IEkxd_apRdNIcykM_ukWROjARdrH5SLhTh_74n2T6tLsK35bmN5IMdgyekzg\"\nMARKETPLACE_ID = \"ATVPDKIKX0DER\"\nSELLER_ID = \"ADBBQREI9OKOD\"\n# SP-API endpoint for US marketplace\nSP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "REFRESH_TOKEN = \"Atzr|IwEBIL9SYl71vJBdgX3s44ryAJ8nWxGkaL-dZ-0ppOMTYoyVwHP8TOVS7VP0-9CgcaKks8GxeYouft6_eBtVYnDhDiRG11k96dHy6qoGM4LIpi5K_KQehTGJT1bVKsgBP6f6bgwq1vAwk9GEUiTcGBaLS9RVBqL2BIFUgUZ0az8zDLmpEqkhKA-vWyf0JFxivFcVkbtaMOZ4zwjE-Or6mnxlhxp24w5CNPU_00tFKSOJyIWdmEbdcju6v4eZm3VdRqjbXYI7Yr9IEkxd_apRdNIcykM_ukWROjARdrH5SLhTh_74n2T6tLsK35bmN5IMdgyekzg\"\nMARKETPLACE_ID = \"ATVPDKIKX0DER\"\nSELLER_ID = \"ADBBQREI9OKOD\"\n# SP-API endpoint for US marketplace\nSP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization\n        payload = {",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "MARKETPLACE_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "MARKETPLACE_ID = \"ATVPDKIKX0DER\"\nSELLER_ID = \"ADBBQREI9OKOD\"\n# SP-API endpoint for US marketplace\nSP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization\n        payload = {\n            'grant_type': 'client_credentials',",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "SELLER_ID",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "SELLER_ID = \"ADBBQREI9OKOD\"\n# SP-API endpoint for US marketplace\nSP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization\n        payload = {\n            'grant_type': 'client_credentials',\n            'client_id': CLIENT_ID,",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "SP_API_ENDPOINT",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.amazon_utils",
        "description": "ecommerce_tool.omnisight.operations.amazon_utils",
        "peekOfCode": "SP_API_ENDPOINT = 'https://sellingpartnerapi-na.amazon.com'\ndef get_access_token(grantless=False):\n    \"\"\"Get an access token.\"\"\"\n    if grantless:\n        # Use grantless authentication for operations that don't require seller authorization\n        payload = {\n            'grant_type': 'client_credentials',\n            'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET,\n            'scope': 'sellingpartnerapi::reports' ",
        "detail": "ecommerce_tool.omnisight.operations.amazon_utils",
        "documentation": {}
    },
    {
        "label": "checkEmailExistOrNot",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def checkEmailExistOrNot(request):\n    email = request.GET.get('email')\n    data = dict()\n    pipeline = [\n        {\n            \"$match\" : {\n                \"email\" : email.lower(),\n                }\n        },\n        {",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "signupUser",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def signupUser(request):\n    data = dict()\n    if request.method == 'POST':\n        json_req = JSONParser().parse(request)\n        otp = random.randint(100000, 999999)\n        client_role_id = DatabaseModel.get_document(role.objects,{\"name\" : \"client\"},['id']).id\n        user_obj = {\n            \"first_name\" : json_req['first_name'],\n            \"last_name\" : json_req['last_name'],\n            \"email\":json_req['email'].lower(),",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "verifyOtp",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def verifyOtp(request):\n    data = dict()\n    data['status'] = False\n    if request.method == 'POST':\n        json_req = JSONParser().parse(request)\n        user_id = json_req['user_id']\n        otp = json_req['otp']\n        user_obj = DatabaseModel.get_document(user.objects,{\"user_id\" : user_id},['otp','otp_generated_time'])\n        if user_obj != None:\n            current_time = datetime.now()",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "forgotPassword",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def forgotPassword(request):\n    data = dict()\n    if request.method == 'POST':\n        json_req = JSONParser().parse(request)\n        email = json_req['email']\n        otp = random.randint(100000, 999999)\n        user_obj = DatabaseModel.get_document(user.objects,{\"email\" : email},['id','first_name','last_name'])\n        if user_obj != None:\n            DatabaseModel.update_documents(user.objects,{'id' : user_obj.id},{\"otp\" : otp, 'otp_generated_time' : datetime.now()})\n            name = f\"{user_obj.first_name} {user_obj.last_name}\"",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "changePassword",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def changePassword(request):\n    data = dict()\n    data['status'] = False\n    if request.method == 'POST':\n        json_req = JSONParser().parse(request)\n        user_id = json_req['user_id']\n        otp = json_req['otp']\n        password = json_req['password']\n        user_obj = DatabaseModel.get_document(user.objects,{\"id\" : user_id},['otp','otp_generated_time'])\n        if user_obj != None:",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "loginUser",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_operations",
        "description": "ecommerce_tool.omnisight.operations.common_operations",
        "peekOfCode": "def loginUser(request):\n    jsonRequest = JSONParser().parse(request)\n    user_data_obj = DatabaseModel.get_document(user.objects,jsonRequest)\n    token = ''\n    valid = False\n    if user_data_obj:\n        DatabaseModel.update_documents(user.objects,{\"id\" : user_data_obj.id},{'last_login' : datetime.now()})\n        role_name = user_data_obj.role_id.name\n        payload = {\n            'id': str(user_data_obj.id),",
        "detail": "ecommerce_tool.omnisight.operations.common_operations",
        "documentation": {}
    },
    {
        "label": "calculate_listing_score",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_utils",
        "description": "ecommerce_tool.omnisight.operations.common_utils",
        "peekOfCode": "def calculate_listing_score(product):\n    total_rules = 13\n    score_per_rule = 10 / total_rules\n    passed_rules = 0\n    def check_title_strange_symbols(p):\n        # Check if the product title contains any emoji\n        title = p.get(\"product_title\", \"\")\n        contains_emoji = any(char in emoji.EMOJI_DATA for char in title)\n        return not contains_emoji\n    def check_title_length(p):",
        "detail": "ecommerce_tool.omnisight.operations.common_utils",
        "documentation": {}
    },
    {
        "label": "assign_listing_score_to_product",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.common_utils",
        "description": "ecommerce_tool.omnisight.operations.common_utils",
        "peekOfCode": "def assign_listing_score_to_product(product_doc):\n    product_dict = product_doc.to_mongo().to_dict()\n    score = calculate_listing_score(product_dict)\n    product_doc.listing_quality_score = score['final_score']\n    product_doc.save()\n    return score\n# def process_products_in_batches(start_index, end_index, product_list):\n#     for i in range(start_index, end_index):\n#         if i >= len(product_list):\n#             break",
        "detail": "ecommerce_tool.omnisight.operations.common_utils",
        "documentation": {}
    },
    {
        "label": "getMarketplaceList",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getMarketplaceList(request):\n    pipeline = [\n        {\n            \"$project\" : {\n                \"_id\" : 0,\n                \"id\" : {\"$toString\" : \"$_id\"},\n                \"name\" : 1,\n                \"image_url\" : 1,\n            }\n        }",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductList",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getProductList(request):\n    pipeline = [\n            {\n                \"$project\" : {\n                    \"_id\" : 1,\n                    \"name\" : 1,\n                    \"image_url\" : 1,\n                }\n            }\n        ]",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductCategoryList",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getProductCategoryList(request):\n    data = dict()\n    marketplace_id = request.GET.get('marketplace_id')\n    match = {}\n    if marketplace_id != None and marketplace_id != \"\":\n        match['marketplace_id'] = ObjectId(marketplace_id)\n    match['end_level'] = True\n    pipeline = [\n        {\n            \"$match\": match    ",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getBrandList",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getBrandList(request):\n    data = dict()\n    marketplace_id = request.GET.get('marketplace_id')\n    pipeline = []\n    if marketplace_id != None and marketplace_id != \"\":\n        match = {\n            \"$match\" : {\n                \"marketplace_id\" : ObjectId(marketplace_id)\n            }\n        }",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchProductDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchProductDetails(request):\n    data = dict()\n    product_id = request.GET.get('product_id')\n    pipeline = [\n        {\n            \"$match\": {\n                \"_id\": ObjectId(product_id)\n            }\n        },\n        {",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getOrdersBasedOnProduct",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getOrdersBasedOnProduct(request):\n    data = {'total_count': 0, 'orders': []}\n    product_id = request.GET.get('product_id')\n    skip = int(request.GET.get('skip', 0))\n    limit = int(request.GET.get('limit', 10))\n    sort_by = request.GET.get('sort_by')\n    sort_by_value = int(request.GET.get('sort_by_value', -1)) \n    # Step 1: Get relevant order_item IDs based on product_id\n    matching_order_items = list(OrderItems.objects.filter(ProductDetails__product_id=ObjectId(product_id)).only('id'))\n    if not matching_order_items:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchAllorders",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchAllorders(request):\n    data = dict()\n    orders = []\n    pipeline = []\n    count_pipeline = []\n    json_request = JSONParser().parse(request)\n    user_id = json_request.get('user_id')\n    limit = int(json_request.get('limit', 100))  # Default limit = 100 if not provided\n    skip = int(json_request.get('skip', 0))  # Default skip = 0 if not provided\n    market_place_id = json_request.get('marketplace_id')",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchOrderDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchOrderDetails(request):\n    data = {}\n    user_id = request.GET.get('user_id')\n    order_id = request.GET.get('order_id')\n    pipeline = [\n        {\n            \"$match\": {\n                \"_id\": ObjectId(order_id)\n            }\n        },",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductListForOrdercreation",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getProductListForOrdercreation(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    skip = int(json_request.get('skip',0))\n    limit = int(json_request.get('limit',50))\n    search_query = json_request.get('search_query')\n    pipeline = []\n    count_pipeline = []\n    match = {}",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "createManualOrder",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def createManualOrder(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    product_detail = list()\n    ordered_products = json_request.get('ordered_products')\n    custom_product_obj = json_request.get('custom_product_obj')\n    user_id = json_request.get('user_id')\n    if user_id:\n        custom_product_obj['user_id'] = ObjectId(user_id)\n    custom_product_obj['order_id'] = str(''.join([str(uuid.uuid4().int)[:13]]))",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "listManualOrders",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def listManualOrders(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    limit = int(json_request.get('limit', 100))  # Default limit = 100 if not provided\n    skip = int(json_request.get('skip', 0))  # Default skip = 0 if not provided\n    sort_by = json_request.get('sort_by')\n    sort_by_value = json_request.get('sort_by_value')\n    pipeline = [\n        {\n            \"$project\": {",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "updateManualOrder",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def updateManualOrder(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    order_id = json_request.get('order_id')\n    ordered_products = json_request.get('ordered_products',[])\n    custom_product_obj = json_request.get('custom_product_obj')\n    # Update basic fields\n    try:\n        purchase_order_date = custom_product_obj.get('purchase_order_date')\n        if purchase_order_date:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchManualOrderDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchManualOrderDetails(request):\n    data = dict()\n    order_id = request.GET.get('order_id')\n    pipeline = [\n        {\n            \"$match\": {\n                \"_id\": ObjectId(order_id)\n            }\n        },\n        {",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "ordersCountForDashboard",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def ordersCountForDashboard(request):\n    data = dict()\n    marketplace_id = request.GET.get('marketplace_id')\n    start_date = request.GET.get('start_date')  # Custom start date\n    end_date = request.GET.get('end_date')  # Custom end date\n    preset = request.GET.get(\"preset\", \"Today\")\n    timezone_str = request.GET.get('timezone', 'US/Pacific')\n    if start_date != None and start_date != \"\":\n        start_date, end_date = convertdateTotimezone(start_date,end_date,timezone_str)\n    else:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "totalSalesAmount",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def totalSalesAmount(request):\n    data = dict()\n    marketplace_id = request.GET.get('marketplace_id')\n    pipeline = []\n    if marketplace_id != None and marketplace_id != \"\":\n        match = {\n            \"$match\" : {\n                \"marketplace_id\" : ObjectId(marketplace_id)\n            }\n        }",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "salesAnalytics",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def salesAnalytics(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')  # Optional marketplace filter\n    date_range = json_request.get('date_range', 'all')  # 'week', 'month', 'year', or 'all'\n    start_date = json_request.get('start_date')  # Optional custom start date\n    end_date = json_request.get('end_date')  # Optional custom end date\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    preset = json_request.get(\"preset\", \"Today\")        \n    if start_date != None and start_date != \"\":",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "mostSellingProducts",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def mostSellingProducts(request):\n    data = dict()\n    pipeline = list()\n    marketPlaceId = request.GET.get('marketPlaceId')\n    start_date = request.GET.get('start_date')  # Optional custom start date\n    end_date = request.GET.get('end_date')  # Optional custom end date\n    # Match conditions for date range\n    match_conditions = {}\n    if start_date and end_date:\n        start_date = datetime.strptime(start_date, '%Y-%m-%d')",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "change_sign",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def change_sign(value):\n    \"\"\"\n    Change the sign of a given value only if it's negative.\n    Args:\n    value (number): The input value to potentially change the sign of.\n    Returns:\n    number: The input value with its sign changed if it was negative, otherwise unchanged.\n    \"\"\"\n    if value < 0:\n        return -value",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getSalesTrendPercentage",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getSalesTrendPercentage(request):\n    import pytz\n    from pytz import timezone\n    data = dict()\n    json_request = JSONParser().parse(request)\n    range_type = json_request.get('range_type', 'month')  # 'day', 'week', 'month', 'year'\n    marketplace_id = json_request.get('marketplace_id')  # Marketplace filter (e.g., 'amazon', 'walmart')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    # Get current time and convert to local time based on timezone_str\n    local_tz = timezone(timezone_str)",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchSalesSummary",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchSalesSummary(request):\n    data = {}\n    total_sales_pipeline = []\n    pipeline = []\n    match = {}\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    start_date = json_request.get('start_date')  # Optional custom start date\n    end_date = json_request.get('end_date')  # Optional custom end date\n    # Add date range filter if provided",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchTopSellingCategories",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchTopSellingCategories(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')  # Optional marketplace filter\n    limit = int(json_request.get('limit', 15))  # Default limit = 15 if not provided\n    start_date = json_request.get('start_date')  # Optional custom start date\n    end_date = json_request.get('end_date')  # Optional custom end date\n    # Match conditions\n    match_conditions = {}\n    if start_date and end_date:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "createUser",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def createUser(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    email = json_request.get(\"email\")\n    old_user_obj = DatabaseModel.get_document(user.objects,{\"email\" : email},['id'])\n    if old_user_obj == None:\n        user_data = {\n            \"first_name\": json_request.get(\"first_name\"),\n            \"last_name\" : json_request.get('last_name'),\n            \"email\": email,",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def updateUser(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    target_user_id = json_request.get(\"target_user_id\")\n    update_obj = json_request.get('update_obj')\n    old_user_obj = DatabaseModel.get_document(user.objects,{\"id\" : target_user_id})\n    data[\"message\"] = \"User Not Updated.\"\n    try:\n        update_obj['role_id'] = ObjectId(update_obj['role_id'])\n    except:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "listUsers",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def listUsers(request):\n    data = dict()\n    limit = int(request.GET.get(\"limit\", 100))  # Default limit = 100\n    skip = int(request.GET.get(\"skip\", 0))  # Default skip = 0\n    pipeline = [\n         {\n            \"$lookup\": {\n                \"from\": \"role\",\n                \"localField\": \"role_id\",\n                \"foreignField\": \"_id\",",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchUserDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchUserDetails(request):\n    data = dict()\n    target_user_id = request.GET.get(\"target_user_id\")\n    data['user_obj'] = {}\n    pipeline = [\n    {\n        \"$match\" : {\n            \"_id\" : ObjectId(target_user_id)\n        }\n    },",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchRoles",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchRoles(request):\n    pipeline = [\n        {\n            \"$project\": {\n                \"_id\": 0,\n                \"id\": {\"$toString\": \"$_id\"},\n                \"name\": 1,\n            }\n        }\n    ]",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchInventryList",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchInventryList(request):\n    data = dict()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    skip = int(json_request.get('skip'))\n    limit = int(json_request.get('limit'))\n    search_query = json_request.get('search_query')   \n    # marketplace = json_request.get('marketplace')\n    # category_name = json_request.get('category_name')\n    # brand_id_list = json_request.get('brand_id_list')",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "exportOrderReport",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def exportOrderReport(request):\n    # Fetch orders from the database\n    orders = list(Order.objects.all())\n    # Create a new Excel workbook\n    workbook = openpyxl.Workbook()\n    sheet = workbook.active\n    sheet.title = \"Order Report\"\n    # Determine the maximum number of products in any order\n    max_products = max(len(order.order_items) for order in orders) if orders else 1\n    # Define base headers",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "fetchSalesSummary",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def fetchSalesSummary(request):\n    data = {}\n    total_sales_pipeline = []\n    pipeline = []\n    match = {}\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    start_date = json_request.get('start_date')  # Optional custom start date\n    end_date = json_request.get('end_date')  # Optional custom end date\n    # Add date range filter if provided",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "getProductVariant",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.general_functions",
        "description": "ecommerce_tool.omnisight.operations.general_functions",
        "peekOfCode": "def getProductVariant(request):\n    variant_list = list()\n    product_id = request.GET.get('product_id')\n    is_duplicate = request.GET.get('is_duplicate',False)\n    parant_sku = DatabaseModel.get_document(Product.objects,{\"id\" : product_id},['parent_sku']).parent_sku\n    match = {}\n    match['parent_sku'] = parant_sku\n    if is_duplicate == \"true\":\n        match['_id'] = {\"$ne\" : ObjectId(product_id)}\n    if parant_sku != None:",
        "detail": "ecommerce_tool.omnisight.operations.general_functions",
        "documentation": {}
    },
    {
        "label": "get_metrics_by_date_range",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def get_metrics_by_date_range(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id',None)\n    target_date_str = json_request.get('target_date')\n    brand_id = json_request.get('brand_id',None)\n    product_id = json_request.get('product_id',None)\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    # Parse target_date_str to extract the date",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "LatestOrdersTodayAPIView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def LatestOrdersTodayAPIView(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    product_id = json_request.get('product_id', [])\n    brand_id = json_request.get('brand_id', [])\n    manufacturer_name = json_request.get('manufacturer_name', [])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    now = datetime.now()\n    # For a 24-hour period ending now\n    start_of_day = now - timedelta(hours=24)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "RevenueWidgetAPIView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def RevenueWidgetAPIView(request):\n    from django.utils import timezone\n    json_request = JSONParser().parse(request)\n    preset = json_request.get(\"preset\", \"Today\")\n    compare_startdate = json_request.get(\"compare_startdate\")\n    compare_enddate = json_request.get(\"compare_enddate\")\n    marketplace_id = json_request.get(\"marketplace_id\", None)\n    product_id = json_request.get(\"product_id\", None)\n    brand_id = json_request.get(\"brand_id\", None)\n    manufacturer_name = json_request.get(\"manufacturer_name\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updatedRevenueWidgetAPIView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def updatedRevenueWidgetAPIView(request):\n    from django.utils import timezone\n    import pytz\n    from concurrent.futures import ThreadPoolExecutor\n    json_request = JSONParser().parse(request)\n    preset = json_request.get(\"preset\", \"Today\")\n    compare_startdate = json_request.get(\"compare_startdate\")\n    compare_enddate = json_request.get(\"compare_enddate\")\n    marketplace_id = json_request.get(\"marketplace_id\", None)\n    product_id = json_request.get(\"product_id\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_top_products",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def get_top_products(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', None)\n    product_id = json_request.get('product_id', None)\n    metric = json_request.get(\"sortBy\", \"units_sold\")  # 'price', 'refund', etc.\n    preset = json_request.get(\"preset\", \"Today\")  # today, yesterday, last_7_days\n    start_date_str = json_request.get(\"start_date\", None)\n    end_date_str = json_request.get(\"end_date\", None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')  # Default to US/Pacific if no timezone is provided",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPreviousDateRange",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getPreviousDateRange(start_date, end_date):\n    duration = end_date - start_date\n    previous_start_date = start_date - duration - timedelta(days=1)\n    previous_end_date = start_date - timedelta(days=1)\n    return previous_start_date.strftime(\"%Y-%m-%d\"), previous_end_date.strftime(\"%Y-%m-%d\")\nALLOWED_SORT_FIELDS = {\n    \"cogs\", \"shipping_cost\", \"page_views\", \"refund\", \"sessions\",\n    \"listing_quality_score\", \"channel_fee\", \"fullfillment_by_channel_fee\",\n    \"vendor_funding\", \"vendor_discount\", \"product_cost\", \"referral_fee\",\n    \"a_shipping_cost\", \"total_cogs\", \"w_product_cost\", \"walmart_fee\",",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_products_with_pagination",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def get_products_with_pagination(request):\n    json_request = JSONParser().parse(request)\n    pipeline = []\n    match = {}\n    # Extract params\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', None)\n    product_id = json_request.get('product_id', None)\n    manufacturer_name = json_request.get('manufacturer_name', [])\n    page = int(json_request.get(\"page\", 1))",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_batch_sales_data",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def get_batch_sales_data(start_date, end_date, product_ids):\n    \"\"\"\n    Batch fetch sales data for multiple products at once\n    Returns dict with product_id as key and aggregated sales data as value\n    \"\"\"\n    # This assumes you have a sales collection/model - adjust according to your schema\n    sales_pipeline = [\n        {\n            \"$match\": {\n                \"product_id\": {\"$in\": product_ids},",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseData",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getPeriodWiseData(request):\n    def to_utc_format(dt):\n        return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    try:\n        json_request = JSONParser().parse(request)\n    except Exception:\n        return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n    marketplace_id = json_request.get('marketplace_id')\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id', [])",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseDataXl",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getPeriodWiseDataXl(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id', [])\n    manufacturer_name = json_request.get('manufacturer_name', [])\n    fulfillment_channel = json_request.get('fulfillment_channel')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    # Define periods with timezone-aware ranges\n    periods = {",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "exportPeriodWiseCSV",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def exportPeriodWiseCSV(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id', [])\n    manufacturer_name = json_request.get('manufacturer_name', [])\n    fulfillment_channel = json_request.get('fulfillment_channel', None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    # Define time periods with timezone-aware date ranges\n    periods = {",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getPeriodWiseDataCustom",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getPeriodWiseDataCustom(request):\n    def to_utc_format(dt):\n        return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id', [])\n    manufacturer_name = json_request.get('manufacturer_name', [])\n    fulfillment_channel = json_request.get('fulfillment_channel', None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "allMarketplaceData",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def allMarketplaceData(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "allMarketplaceDataxl",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def allMarketplaceDataxl(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadMarketplaceDataCSV",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def downloadMarketplaceDataCSV(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "sales",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def sales(orders):\n    sku_summary = defaultdict(lambda: {\n        \"sku\": \"\",\n        \"product_name\": \"\",\n        \"images\": \"\",\n        \"unitsSold\": 0,\n        \"grossRevenue\": 0.0,\n        \"totalCogs\": 0.0,\n        \"netProfit\": 0.0,\n        \"margin\": 0.0,",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProductPerformanceSummary",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getProductPerformanceSummary(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    local_tz = timezone(timezone_str)\n    today = datetime.now(local_tz)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadProductPerformanceSummary",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def downloadProductPerformanceSummary(request):\n    action = request.GET.get(\"action\", \"\").lower()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    local_tz = timezone(timezone_str)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadProductPerformanceCSV",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def downloadProductPerformanceCSV(request):\n    action = request.GET.get(\"action\", \"\").lower()\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "CityCSVUploadView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def CityCSVUploadView(request):\n    if request.method != 'POST':\n        return JsonResponse({\"error\": \"Only POST method allowed\"}, status=405)\n    file = request.FILES.get('file')\n    if not file:\n        return JsonResponse({\"error\": \"No file uploaded\"}, status=400)\n    try:\n        try:\n            decoded_file = file.read().decode('utf-8')\n        except UnicodeDecodeError:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getCitywiseSales",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getCitywiseSales(request):\n    json_request = JSONParser().parse(request)\n    level = json_request.get(\"level\", \"city\").lower()  \n    action = json_request.get(\"action\", \"all\").lower()  \n    preset = json_request.get(\"preset\", \"Yesterday\")\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "exportCitywiseSalesExcel",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def exportCitywiseSalesExcel(request):\n    json_request = JSONParser().parse(request)\n    level = json_request.get(\"level\", \"city\").lower()  \n    action = json_request.get(\"action\", \"all\").lower()  \n    preset = json_request.get(\"preset\", \"Yesterday\")\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "downloadCitywiseSalesCSV",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def downloadCitywiseSalesCSV(request):\n    json_request = JSONParser().parse(request)\n    level = json_request.get(\"level\", \"city\").lower()  \n    action = json_request.get(\"action\", \"all\").lower()  \n    preset = json_request.get(\"preset\", \"Yesterday\")\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "generate_monthly_intervals",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def generate_monthly_intervals(from_date, to_date):\n    intervals = []\n    current_date = from_date.replace(day=1)\n    while current_date <= to_date:\n        intervals.append(current_date.strftime('%Y-%m-%d 00:00:00'))\n        # Move to the next month\n        if current_date.month == 12:\n            current_date = current_date.replace(year=current_date.year + 1, month=1)\n        else:\n            current_date = current_date.replace(month=current_date.month + 1)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "calculate_metrics",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def calculate_metrics(start_date, end_date,marketplace_id,brand_id,product_id,manufacturer_name,fulfillment_channel,timezone):\n    gross_revenue = 0\n    total_cogs = 0\n    refund = 0\n    net_profit = 0\n    margin = 0\n    total_units = 0\n    sku_set = set()\n    product_categories = {}\n    product_completeness = {\"complete\": 0, \"incomplete\": 0}",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProfitAndLossDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getProfitAndLossDetails(request):\n    def to_utc_format(dt):\n        return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profit_loss_chart",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def profit_loss_chart(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset')\n    timezone = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitLossExportXl",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def profitLossExportXl(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset', \"Last 30 days\")\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitLossChartCsv",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def profitLossChartCsv(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id', None)\n    brand_id = json_request.get('brand_id', [])\n    product_id = json_request.get('product_id',[])\n    manufacturer_name = json_request.get('manufacturer_name',[])\n    fulfillment_channel = json_request.get('fulfillment_channel',None)\n    preset = json_request.get('preset',\"Last 7 days\")\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updateChooseMatrix",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def updateChooseMatrix(request):\n    json_req = JSONParser().parse(request)\n    name = json_req['name']\n    if name == \"Today Snapshot\":\n        if 'select_all' in json_req and json_req['select_all'] == True:\n            update_fields = {\n            'select_all': json_req['select_all'], 'gross_revenue': True,\n                'total_cogs': True,\n                'profit_margin': True,\n                'orders': True,",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "createNotes",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def createNotes(self, request):\n    try:\n        data = JSONParser().parse(request)\n        product_id = data.get(\"product_id\")\n        user_id = data.get(\"user_id\")\n        notes = data.get(\"notes\")\n        if not product_id or not user_id or not notes:\n            return JsonResponse({\"error\": \"Missing required fields.\"}, status=400)\n        try:\n            product = Product.objects.get(id=product_id)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "ListingOptimizationView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def ListingOptimizationView(request):\n    all_products = Product.objects()\n    optimized_count = 0\n    total_products = all_products.count()\n    def is_optimized(product):\n        # Title check\n        title = product.product_title or \"\"\n        if len(title) < 100 or re.search(r'(?i)(best|free|deal|offer|discount)', title):\n            return False\n        # Bullet check",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "obtainChooseMatrix",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def obtainChooseMatrix(request):\n    name = request.GET.get('name')\n    item_pipeline = [\n                        { \"$match\": { \"name\": name } },\n                    ]\n    item_result = list(chooseMatrix.objects.aggregate(*item_pipeline))\n    if item_result:\n        del item_result[0]['_id']\n        item_result = item_result[0]\n        return JsonResponse(item_result,safe=False)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "InsightsDashboardView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def InsightsDashboardView(request):\n    all_products = Product.objects.only(\n        \"id\", \"product_title\", \"features\", \"product_description\",\n        \"image_urls\", \"upc\", \"category\",\n        \"asin\", \"sku\", \"fullfillment_by_channel\"\n    ).all()\n    count_pipeline = [\n        {\n            \"$count\": \"total_count\"\n        }",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsDetailsPageSummary",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productsDetailsPageSummary(request):\n    product_id = request.GET.get('product_id')\n    pipeline = [\n        {\n            \"$match\": {\n                \"_id\": ObjectId(product_id)\n            }\n        },\n        {\n            \"$project\": {",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "format_date_label",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def format_date_label(preset, start_date, end_date):\n    if preset == \"Today\":\n        return start_date.strftime(\"%B %d, %Y\")\n    elif preset == \"Yesterday\":\n        return start_date.strftime(\"%B %d, %Y\")\n    elif preset in [\"Last 7 Days\", \"Last 30 Days\"]:\n        return f\"{start_date.strftime('%B %d, %Y')} - {end_date.strftime('%B %d, %Y')}\"\n    else:\n        return f\"{start_date.strftime('%B %d, %Y')} - {end_date.strftime('%B %d, %Y')}\"\ndef getdaywiseproductssold_dict(start_date, end_date, product_id, is_hourly=False):",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getdaywiseproductssold_dict",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getdaywiseproductssold_dict(start_date, end_date, product_id, is_hourly=False):\n    results = getdaywiseproductssold(start_date, end_date, product_id, is_hourly)\n    return {item[\"date\"]: item for item in results}\ndef get_val_from_dict(date_obj, data_dict):\n    date_str = date_obj.strftime(\"%Y-%m-%d\")\n    entry = data_dict.get(date_str)\n    if entry:\n        return entry[\"total_quantity\"], float(entry[\"total_price\"])\n    return 0, 0.0\ndef sum_period_from_dict(start_day, end_day, data_dict):",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "get_val_from_dict",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def get_val_from_dict(date_obj, data_dict):\n    date_str = date_obj.strftime(\"%Y-%m-%d\")\n    entry = data_dict.get(date_str)\n    if entry:\n        return entry[\"total_quantity\"], float(entry[\"total_price\"])\n    return 0, 0.0\ndef sum_period_from_dict(start_day, end_day, data_dict):\n    qty, price = 0, 0.0\n    day = start_day\n    while day <= end_day:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "sum_period_from_dict",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def sum_period_from_dict(start_day, end_day, data_dict):\n    qty, price = 0, 0.0\n    day = start_day\n    while day <= end_day:\n        q, p = get_val_from_dict(day, data_dict)\n        qty += q\n        price += p\n        day += timedelta(days=1)\n    return qty, round(price, 2)\ndef calc_diff_trend(current, previous):",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "calc_diff_trend",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def calc_diff_trend(current, previous):\n    diff = round(current - previous, 2)\n    trend = \"up\" if diff > 0 else \"down\" if diff < 0 else \"neutral\"\n    return diff, trend\ndef productsSalesOverview(request):\n    from django.utils import timezone\n    product_id = request.GET.get(\"product_id\")\n    preset = request.GET.get(\"preset\", \"\")\n    timezone_str = request.GET.get('timezone', 'US/Pacific')\n    local_tz = pytz.timezone(timezone_str)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsSalesOverview",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productsSalesOverview(request):\n    from django.utils import timezone\n    product_id = request.GET.get(\"product_id\")\n    preset = request.GET.get(\"preset\", \"\")\n    timezone_str = request.GET.get('timezone', 'US/Pacific')\n    local_tz = pytz.timezone(timezone_str)\n    now = datetime.now(local_tz)\n    is_hourly = False\n    login_date = now.date()\n    yesterday = login_date - timedelta(days=1)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsListingQualityScore",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productsListingQualityScore(request):\n    product_id = request.GET.get('product_id')\n    product_doc = DatabaseModel.get_document(Product.objects,{\"id\" : ObjectId(product_id)})\n    product_dict = product_doc.to_mongo().to_dict()\n    listing_data = calculate_listing_score(product_dict)\n    DatabaseModel.update_documents(Product.objects,{\"id\" : ObjectId(product_id)},{\"listing_quality_score\" : listing_data['final_score']})\n    scoreData = {\n        \"asin\": product_dict.get(\"product_id\",\"\"),\n        \"imageUrl\": product_dict.get(\"image_url\",\"\"),\n        \"title\": product_dict.get(\"product_title\",\"\"),  ",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productsTrafficandConversions",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productsTrafficandConversions(request):\n    data = dict()\n    preset = request.GET.get('preset')\n    product_id = request.GET.get('product_id')\n    product_obj = DatabaseModel.get_document(Product.objects,{\"id\" : ObjectId(product_id)},['product_id'])\n    data['asin'] = product_obj.product_id\n    # Calculate date ranges\n    timezone_str = request.GET.get('timezone', 'US/Pacific')\n    start_date = request.GET.get(\"start_date\", None)\n    end_date = request.GET.get(\"end_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getSKUlist",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getSKUlist(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    search_query = json_request.get('search_query')\n    brand_id = json_request.get('brand_id')\n    manufacturer_name = json_request.get('manufacturer_name')\n    match =dict()\n    pipeline = []\n    if search_query != None and search_query != \"\":\n        search_query = re.escape(search_query.strip())",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getproductIdlist",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getproductIdlist(request):\n    json_request = JSONParser().parse(request)\n    marketplace_id = json_request.get('marketplace_id')\n    brand_id = json_request.get('brand_id')\n    search_query = json_request.get('search_query')\n    manufacturer_name = json_request.get('manufacturer_name')\n    match = dict()\n    pipeline = []\n    # Normalize brand_id and manufacturer_name to lists if needed\n    if brand_id and isinstance(brand_id, str):",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getBrandListforfilter",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getBrandListforfilter(request):\n    data = dict()\n    marketplace_id = request.GET.get('marketplace_id')\n    search_query = request.GET.get('search_query')\n    skip = int(request.GET.get('skip',1))\n    match =dict()\n    pipeline = []\n    if search_query != None and search_query != \"\":\n        search_query = re.escape(search_query.strip())\n        match[\"name\"] = {\"$regex\": search_query, \"$options\": \"i\"}",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "obtainManufactureNames",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def obtainManufactureNames(request):\n    marketplace_id = request.GET.get('marketplace_id')\n    search_query = request.GET.get('search_query')\n    match = {}\n    # Build match query\n    if search_query:\n        search_query = re.escape(search_query.strip())\n        match[\"manufacturer_name\"] = {\"$regex\": search_query, \"$options\": \"i\"}\n    if marketplace_id and marketplace_id not in [\"\", \"all\", \"custom\"]:\n        match['marketplace_id'] = ObjectId(marketplace_id)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "InsightsProductWise",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def InsightsProductWise(request):\n    product_id = request.GET.get('product_id')\n    optimized_count = 0\n    refund_alerts = []\n    fee_alerts = []\n    listing_optimization_alerts = []\n    product_performance_alerts = []  # New alert list for Product Performance\n    def is_optimized(product):\n        title = product.product_title or \"\"\n        if len(title) < 100 or re.search(r'(?i)(best|free|deal|offer|discount)', title):",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProfitAndLossDetailsForProduct",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getProfitAndLossDetailsForProduct(request):\n    def to_utc_format(dt):\n        return dt.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    json_request = JSONParser().parse(request)\n    product_id = json_request.get('product_id')\n    preset = json_request.get('preset')\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)\n    end_date = json_request.get(\"end_date\", None)",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "profitlosschartForProduct",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def profitlosschartForProduct(request):\n    json_request = JSONParser().parse(request)\n    product_id = json_request.get('product_id')\n    preset = json_request.get('preset')\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)\n    end_date = json_request.get(\"end_date\", None)\n    if start_date != None and start_date != \"\":\n        start_date, end_date = convertdateTotimezone(start_date,end_date,timezone_str)\n    else:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getrevenuedetailsForProduct",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getrevenuedetailsForProduct(request):\n    json_request = JSONParser().parse(request)\n    preset = json_request.get(\"preset\", None)\n    product_id = json_request.get(\"product_id\", None)\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)\n    end_date = json_request.get(\"end_date\", None)\n    if start_date != None and start_date != \"\":\n        start_date, end_date = convertdateTotimezone(start_date,end_date,timezone_str)\n    else:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getInventryLogForProductdaywise",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getInventryLogForProductdaywise(request):\n    json_request = JSONParser().parse(request)\n    preset = json_request.get(\"preset\", \"Today\")\n    product_id = json_request.get(\"product_id\")\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)\n    end_date = json_request.get(\"end_date\", None)\n    if start_date != None and start_date != \"\":\n        start_date, end_date = convertdateTotimezone(start_date,end_date,timezone_str)\n    else:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "getProductInformation",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def getProductInformation(request):\n    product_id = request.GET.get('product_id')\n    product_obj = DatabaseModel.get_document(Product.objects,{\"id\" : product_id})\n    # Fetch marketplace IDs\n    marketplace_ids = product_obj.marketplace_ids\n    marketplaces = Marketplace.objects.filter(id__in=[ins.id for ins in marketplace_ids])\n    # Check for Amazon and Walmart presence\n    has_amazon = len(marketplaces.filter(name__iexact=\"Amazon\")) > 0\n    has_walmart = len(marketplaces.filter(name__iexact=\"Walmart\")) > 0\n    # Prepare response data",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "updateProductDetails",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def updateProductDetails(request):\n    json_request = JSONParser().parse(request)\n    product_id = json_request.get('product_id')\n    update_obj = json_request.get('update_obj', {})\n    DatabaseModel.update_documents(Product.objects,{\"id\": product_id}, update_obj)\n    return True\n@csrf_exempt\ndef productUnitProfitability(request):\n    json_request = JSONParser().parse(request)\n    product_id = json_request.get(\"product_id\")",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productUnitProfitability",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productUnitProfitability(request):\n    json_request = JSONParser().parse(request)\n    product_id = json_request.get(\"product_id\")\n    reponse_list =[]\n    product_obj = DatabaseModel.get_document(Product.objects,{\"id\" : product_id})\n    marketplaces = [ins.name for ins in product_obj.marketplace_ids]\n    has_amazon = \"Amazon\" in marketplaces\n    has_walmart = \"Walmart\" in marketplaces\n    vendor_funding = round(product_obj.vendor_funding, 2) if product_obj.vendor_funding else 0\n    if has_amazon:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "productNetprofit",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def productNetprofit(request):\n    json_request = JSONParser().parse(request)\n    preset = json_request.get(\"preset\", \"Today\")\n    product_id = json_request.get(\"product_id\")\n    timezone_str = json_request.get('timezone', 'US/Pacific')\n    start_date = json_request.get(\"start_date\", None)\n    end_date = json_request.get(\"end_date\", None)\n    if start_date != None and start_date != \"\":\n        start_date, end_date = convertdateTotimezone(start_date,end_date,timezone_str)\n    else:",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "cogsGraph",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def cogsGraph(request):\n    product_id = request.GET.get('product_id')\n    product_obj = DatabaseModel.get_document(Product.objects,{\"id\" : product_id})\n    # Fetch marketplace IDs\n    marketplace_ids = product_obj.marketplace_ids\n    response_list = [{\n        \"date_range\": product_obj.product_created_date.strftime(\"%b %d, %Y\") + \" - Current\" if product_obj.product_created_date else \"N/A - Current\",\n        \"product_cost\": round(product_obj.product_cost, 2) if product_obj.product_cost else 0,\n        \"shipping_cost\": round(product_obj.a_shipping_cost, 2) if product_obj.a_shipping_cost else 0,\n        \"amazon_fee\": round(product_obj.referral_fee, 2) if product_obj.referral_fee else 0,",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "priceGraph",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "def priceGraph(request):\n    product_id = request.GET.get('product_id')\n    preset = request.GET.get('preset', 'Today')\n    timezone_str = request.GET.get('timezone', 'US/Pacific')\n    start_date, end_date = get_date_range(preset, timezone_str)\n    # Generate all dates between start_date and end_date\n    date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]\n    # Fetch price change logs for the given product and date range\n    price_changes = productPriceChange.objects.filter(\n        product_id=product_id,",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "ALLOWED_SORT_FIELDS",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "description": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "peekOfCode": "ALLOWED_SORT_FIELDS = {\n    \"cogs\", \"shipping_cost\", \"page_views\", \"refund\", \"sessions\",\n    \"listing_quality_score\", \"channel_fee\", \"fullfillment_by_channel_fee\",\n    \"vendor_funding\", \"vendor_discount\", \"product_cost\", \"referral_fee\",\n    \"a_shipping_cost\", \"total_cogs\", \"w_product_cost\", \"walmart_fee\",\n    \"w_shiping_cost\", \"w_total_cogs\", \"pack_size\", \"created_at\", \"updated_at\",\n    \"product_created_date\", \"producted_last_updated_date\", \"brand_name\", \"category\", \n    \"manufacturer_name\", \"price_start\", \"price_end\", \"stock\", \"sku_count\", \n    \"totalchannelFees\", \"netProfit\", \"grossRevenue\", \"unitsSoldForToday\", \"salesForToday\"\n}",
        "detail": "ecommerce_tool.omnisight.operations.helium_dashboard",
        "documentation": {}
    },
    {
        "label": "convertdateTotimezone",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def convertdateTotimezone(start_date,end_date,timezone_str):\n    import pytz\n    local_tz = pytz.timezone(timezone_str)\n    naive_from_date = datetime.strptime(start_date, '%Y-%m-%d')\n    naive_to_date = datetime.strptime(end_date, '%Y-%m-%d')\n    naive_to_date = naive_to_date.replace(hour=23, minute=59, second=59)\n    start_date = local_tz.localize(naive_from_date)\n    end_date = local_tz.localize(naive_to_date)\n    return start_date, end_date\ndef convertLocalTimeToUTC(start_date, end_date, timezone_str):",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "convertLocalTimeToUTC",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def convertLocalTimeToUTC(start_date, end_date, timezone_str):\n    import pytz\n    local_tz = pytz.timezone(timezone_str)\n    # If dates are naive (no timezone), localize them\n    if start_date.tzinfo is None:\n        start_date = local_tz.localize(start_date)\n    if end_date.tzinfo is None:\n        end_date = local_tz.localize(end_date)\n    # Convert to UTC\n    start_date = start_date.astimezone(pytz.UTC)",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getOrdersListBasedonProductId",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def getOrdersListBasedonProductId(productIds,start_date=None, end_date=None):\n    \"\"\"\n    Fetches the list of orders based on the provided product ID using a pipeline aggregation.\n    Args:\n        productId (str): The ID of the product for which to fetch orders.\n    Returns:\n        list: A list of dictionaries containing order details.\n    \"\"\"\n    pipeline = []\n    if start_date and end_date:",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getproductIdListBasedonbrand",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def getproductIdListBasedonbrand(brandIds,start_date=None, end_date=None):\n    \"\"\"\n    Fetches the list of product IDs based on the provided brand ID using a pipeline aggregation.\n    Args:\n        productId (str): The ID of the brand for which to fetch product IDs.\n    Returns:\n        list: A list of dictionaries containing product details.\n    \"\"\"\n    orders = []\n    pipeline = [",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getproductIdListBasedonManufacture",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def getproductIdListBasedonManufacture(manufactureName = [],start_date=None, end_date=None):\n    \"\"\"\n    Fetches the list of product IDs based on the provided brand ID using a pipeline aggregation.\n    Args:\n        productId (str): The ID of the brand for which to fetch product IDs.\n    Returns:\n        list: A list of dictionaries containing product details.\n    \"\"\"\n    orders = []\n    pipeline = [",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_date_range",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def get_date_range(preset, time_zone_str=\"UTC\"):\n    # Get the timezone object\n    tz = timezone(time_zone_str)\n    # Get today's date in the specified timezone\n    now = datetime.now(tz)\n    today = now.replace(hour=0, minute=0, second=0, microsecond=0)\n    if preset == \"Today\":\n        start = today\n        return start, start.replace(hour=23, minute=59, second=59)\n    elif preset == \"Yesterday\":",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "grossRevenue",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def grossRevenue(start_date, end_date, marketplace_id=None, brand_id=None, \n                product_id=None, manufacuture_name=[], fulfillment_channel=None, \n                timezone='UTC'):    \n    # Convert local timezone dates to UTC\n    if timezone != 'UTC':\n        start_date,end_date = convertLocalTimeToUTC(start_date, end_date, timezone)\n    # Remove timezone info for MongoDB query (assuming your MongoDB driver expects naive UTC)\n    start_date = start_date.replace(tzinfo=None)\n    end_date = end_date.replace(tzinfo=None)\n    pipeline = [",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_previous_periods",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def get_previous_periods(current_start, current_end):\n    # Calculate the duration of the current period\n    period_duration = current_end - current_start\n    if period_duration.days > 1:\n        period_duration += timedelta(days=1)\n    # Calculate previous periods\n    previous_period = {\n        'start': (current_start - period_duration).strftime('%b %d, %Y'),\n        'end': (current_start - timedelta(days=1)).strftime('%b %d, %Y')\n    }",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "refundOrder",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def refundOrder(start_date, end_date, marketplace_id=None,brand_id=None,product_id=None,manufacuture_name=[],fulfillment_channel=None,timezone='UTC'):    \n    # Convert local timezone dates to UTC\n    if timezone != 'UTC':\n        start_date,end_date = convertLocalTimeToUTC(start_date, end_date, timezone)\n    # Remove timezone info for MongoDB query (assuming your MongoDB driver expects naive UTC)\n    start_date = start_date.replace(tzinfo=None)\n    end_date = end_date.replace(tzinfo=None)\n    match=dict()\n    match['order_date'] = {\"$gte\": start_date, \"$lte\": end_date}\n    match['order_status'] = \"Refunded\"",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "AnnualizedRevenueAPIView",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def AnnualizedRevenueAPIView(target_date):\n    # Calculate date range (last 12 months from today)\n    start_date = target_date - timedelta(days=365)\n    # Initialize variables\n    monthly_revenues = []\n    total_gross_revenue = 0\n    # Calculate revenue for each of the last 12 months\n    for i in range(12):\n        month_start = start_date + timedelta(days=30*i)\n        month_end = month_start + timedelta(days=30)",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "getdaywiseproductssold",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def getdaywiseproductssold(start_date, end_date, product_id, is_hourly=False):\n    \"\"\"\n    Fetch total quantity and price of a product sold between start_date and end_date,\n    grouped by day or hour based on is_hourly flag.\n    Args:\n        start_date (datetime): Start date/time for filtering orders.\n        end_date (datetime): End date/time for filtering orders.\n        product_id (str): The product ID to filter by.\n        is_hourly (bool): If True, group by hour; else group by day.\n    Returns:",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "pageViewsandSessionCount",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def pageViewsandSessionCount(start_date,end_date,product_id):\n    \"\"\"\n    Fetches the list of orders based on the provided product ID using a pipeline aggregation.\n    Args:\n        productId (str): The ID of the product for which to fetch orders.\n    Returns:\n        list: A list of dictionaries containing order details.\n    \"\"\"\n    pipeline = [\n        {",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def get_graph_data(start_date, end_date, preset, marketplace_id, brand_id=None, product_id=None, \n                  manufacturer_name=None, fulfillment_channel=None, timezone=\"UTC\"):\n    import pytz\n    # Store the original timezone for later conversion\n    user_timezone = pytz.timezone(timezone) if timezone != 'UTC' else pytz.UTC\n    # Store original dates in user timezone\n    original_start_date = start_date\n    original_end_date = end_date\n    # Convert to UTC for database queries\n    if timezone != 'UTC':",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "totalRevenueCalculation",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def totalRevenueCalculation(start_date, end_date, marketplace_id=None, brand_id=None, product_id=None, manufacturer_name=None, fulfillment_channel=None,timezone_str=\"UTC\"):\n    total = dict()\n    gross_revenue = 0\n    total_cogs = 0\n    refund = 0\n    net_profit = 0\n    total_units = 0\n    total_orders = 0\n    temp_other_price = 0\n    vendor_funding = 0",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "calculate_metricss",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def calculate_metricss(\n    from_date,\n    to_date,\n    marketplace_id,\n    brand_id,\n    product_id,\n    manufacturer_name,\n    fulfillment_channel,\n    timezone='UTC',\n    include_extra_fields=False,",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "totalRevenueCalculationForProduct",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def totalRevenueCalculationForProduct(start_date, end_date, marketplace_id=None, brand_id=None, product_id=None, manufacturer_name=None, fulfillment_channel=None,timezone_str=\"UTC\"):\n    total = dict()\n    gross_revenue = 0\n    total_cogs = 0\n    net_profit = 0\n    total_units = 0\n    temp_other_price = 0\n    vendor_funding = 0\n    result = grossRevenue(start_date, end_date, marketplace_id, brand_id, product_id, manufacturer_name, fulfillment_channel,timezone_str)\n    def process_order(order):",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "get_top_movers",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.helium_utils",
        "description": "ecommerce_tool.omnisight.operations.helium_utils",
        "peekOfCode": "def get_top_movers(yesterday_data, previous_day_data):\n    # Create lookup for previous day's data by SKU\n    prev_data_map = {item['sku']: item for item in previous_day_data}\n    changes = []\n    for item in yesterday_data:\n        sku = item['sku']\n        yesterday_units = item['unitsSold']\n        prev_units = prev_data_map.get(sku, {}).get('unitsSold', 0)\n        change = yesterday_units - prev_units  # can be positive or negative\n        changes.append({",
        "detail": "ecommerce_tool.omnisight.operations.helium_utils",
        "documentation": {}
    },
    {
        "label": "oauthFunction",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.walmart_utils",
        "description": "ecommerce_tool.omnisight.operations.walmart_utils",
        "peekOfCode": "def oauthFunction():\n    accesstoken = None\n    # Walmart Authentication URL\n    AUTH_URL = \"https://marketplace.walmartapis.com/v3/token\"\n    # Encode credentials in Base64\n    credentials = f\"{WALMART_API_KEY}:{WALMART_SECRET_KEY}\"\n    encoded_credentials = base64.b64encode(credentials.encode()).decode()\n    # Headers for the request\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",",
        "detail": "ecommerce_tool.omnisight.operations.walmart_utils",
        "documentation": {}
    },
    {
        "label": "getAccesstoken",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.operations.walmart_utils",
        "description": "ecommerce_tool.omnisight.operations.walmart_utils",
        "peekOfCode": "def getAccesstoken(user_id):\n    marketplace_id = DatabaseModel.get_document(Marketplace.objects,{\"name\" : \"Walmart\"},['id']).id\n    exist_access_token_obj = DatabaseModel.get_document(access_token.objects,{\"user_id\" : user_id,\"marketplace_id\" : marketplace_id},['access_token_str','updation_time'])\n    if exist_access_token_obj != None:\n        # Get the current time\n        current_time = datetime.now()\n        # Get the creation time of the access token\n        creation_time = exist_access_token_obj.updation_time\n        # Check if the current time is greater than the creation time plus 14 minutes\n        if current_time < creation_time + timedelta(minutes=14):",
        "detail": "ecommerce_tool.omnisight.operations.walmart_utils",
        "documentation": {}
    },
    {
        "label": "test_signupuser",
        "kind": 2,
        "importPath": "ecommerce_tool.omnisight.tests.test_views",
        "description": "ecommerce_tool.omnisight.tests.test_views",
        "peekOfCode": "def test_signupuser():\n    client=APIClient()\n    url=reverse('signupUser')\n    data={\n        \"email\":\"test@example.com\",\n        'password':'password123'\n    }\n    response=client.post(url,data,format='json')\n    assert response.status_code==200\n    assert 'success' in response.data.get('message',\"\").lower()",
        "detail": "ecommerce_tool.omnisight.tests.test_views",
        "documentation": {}
    },
    {
        "label": "OmnisightConfig",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.apps",
        "description": "ecommerce_tool.omnisight.apps",
        "peekOfCode": "class OmnisightConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'omnisight'",
        "detail": "ecommerce_tool.omnisight.apps",
        "documentation": {}
    },
    {
        "label": "Marketplace",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Marketplace(Document):\n    name = StringField()  # Marketplace name\n    url = StringField()  # Marketplace URL\n    image_url = StringField()  # Marketplace logo URL\n    created_at = StringField()  # Timestamp when the marketplace was added\n    updated_at = StringField()  # Timestamp when the marketplace was last updated\nclass Category(Document):\n    name = StringField(required=True)  # Category name\n    parent_category_id = ReferenceField('self', null=True)  # Parent category (if applicable)\n    marketplace_id = ReferenceField(Marketplace)  # Reference to the marketplace",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Category(Document):\n    name = StringField(required=True)  # Category name\n    parent_category_id = ReferenceField('self', null=True)  # Parent category (if applicable)\n    marketplace_id = ReferenceField(Marketplace)  # Reference to the marketplace\n    breadcrumb_path = ListField(StringField())  # Hierarchical category path\n    level = IntField()  # Category level\n    created_at = StringField()  # Timestamp when the category was added\n    updated_at = StringField()  # Timestamp when the category was last updated\n    end_level = BooleanField(default=False)  # Whether the category is the last level in the hierarchy\nclass Brand(Document):",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Brand",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Brand(Document):\n    name = StringField()  # Brand name\n    description = StringField()  # Brand description\n    website = StringField()  # Brand website\n    marketplace_id = ReferenceField(Marketplace)  # Reference to the marketplace\n    marketplace_ids = ListField(ReferenceField(Marketplace),default=[])  # List of Marketplace IDs\nclass Manufacturer(Document):\n    name = StringField()  # Manufacturer name\n    description = StringField()  # Manufacturer description\n    website = StringField()  # Manufacturer website",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Manufacturer(Document):\n    name = StringField()  # Manufacturer name\n    description = StringField()  # Manufacturer description\n    website = StringField()  # Manufacturer website\n    marketplace_id = ReferenceField(Marketplace)  # Reference to the marketplace\nclass Product(Document):\n    # General Product Details\n    product_title = StringField()\n    product_description = StringField()\n    product_id = StringField()  # Can store ASIN, UPC, GTIN, WPID",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Product(Document):\n    # General Product Details\n    product_title = StringField()\n    product_description = StringField()\n    product_id = StringField()  # Can store ASIN, UPC, GTIN, WPID\n    product_id_type = StringField()\n    price = FloatField()\n    currency = StringField(default=\"$\")\n    quantity = IntField(default=0)\n    quantity_unit = StringField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "ignore_api_functions",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class ignore_api_functions(Document):\n    name = StringField()\nclass mail_template(Document):\n    code = StringField()\n    subject = StringField()\n    default_template = StringField()\n    cutomize_template = StringField()\nclass role(Document):\n    name = StringField()\n    description = StringField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "mail_template",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class mail_template(Document):\n    code = StringField()\n    subject = StringField()\n    default_template = StringField()\n    cutomize_template = StringField()\nclass role(Document):\n    name = StringField()\n    description = StringField()\n    priority = IntField()\nclass user(Document):",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "role",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class role(Document):\n    name = StringField()\n    description = StringField()\n    priority = IntField()\nclass user(Document):\n    first_name = StringField()\n    last_name = StringField()\n    username = StringField()\n    email = StringField(required=True)\n    password = StringField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class user(Document):\n    first_name = StringField()\n    last_name = StringField()\n    username = StringField()\n    email = StringField(required=True)\n    password = StringField()\n    age = IntField()\n    date_of_birth = StringField()\n    mobile_number = StringField()\n    active = BooleanField(default=True)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class access_token(Document):\n    user_id = ReferenceField(user)\n    access_token_str = StringField()\n    creation_time = DateTimeField(default=datetime.now())\n    updation_time = DateTimeField(default=datetime.now())\n    marketplace_id = ReferenceField(Marketplace)\nclass Money(EmbeddedDocument):\n    CurrencyCode = StringField(required=True)\n    Amount = FloatField(required=True)\nclass Pricing(EmbeddedDocument):",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Money",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Money(EmbeddedDocument):\n    CurrencyCode = StringField(required=True)\n    Amount = FloatField(required=True)\nclass Pricing(EmbeddedDocument):\n    ItemPrice = EmbeddedDocumentField(Money, required=True)\n    ItemTax = EmbeddedDocumentField(Money, default=None)\n    PromotionDiscount = EmbeddedDocumentField(Money, default=None)\nclass ProductDetails(EmbeddedDocument):\n    product_id = ReferenceField(Product)\n    Title = StringField(required=True)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Pricing",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Pricing(EmbeddedDocument):\n    ItemPrice = EmbeddedDocumentField(Money, required=True)\n    ItemTax = EmbeddedDocumentField(Money, default=None)\n    PromotionDiscount = EmbeddedDocumentField(Money, default=None)\nclass ProductDetails(EmbeddedDocument):\n    product_id = ReferenceField(Product)\n    Title = StringField(required=True)\n    SKU = StringField(required=True)\n    ASIN = StringField(default=None)\n    Condition = StringField(default=None)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "ProductDetails",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class ProductDetails(EmbeddedDocument):\n    product_id = ReferenceField(Product)\n    Title = StringField(required=True)\n    SKU = StringField(required=True)\n    ASIN = StringField(default=None)\n    Condition = StringField(default=None)\n    QuantityOrdered = IntField(required=True)\n    QuantityShipped = IntField(required=True)\nclass Fulfillment(EmbeddedDocument):\n    FulfillmentOption = StringField(default=None)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Fulfillment",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Fulfillment(EmbeddedDocument):\n    FulfillmentOption = StringField(default=None)\n    ShipMethod = StringField(default=None)\n    Carrier = StringField(default=None)\n    TrackingNumber = StringField(default=None)\n    TrackingURL = StringField(default=None)\n    ShipDateTime = DateTimeField(default=None)\nclass OrderStatus(EmbeddedDocument):\n    STATUS_CHOICES = (\"Pending\", \"Shipped\", \"Delivered\", \"Canceled\", \"Returned\")\n    Status = StringField(required=True)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "OrderStatus",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class OrderStatus(EmbeddedDocument):\n    STATUS_CHOICES = (\"Pending\", \"Shipped\", \"Delivered\", \"Canceled\", \"Returned\")\n    Status = StringField(required=True)\n    StatusDate = DateTimeField(required=True)\nclass TaxCollection(EmbeddedDocument):\n    Model = StringField(required=True)\n    ResponsibleParty = StringField(required=True)\nclass BuyerInfo(EmbeddedDocument):\n    Name = StringField(default=None)\n    Email = StringField(default=None)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "TaxCollection",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class TaxCollection(EmbeddedDocument):\n    Model = StringField(required=True)\n    ResponsibleParty = StringField(required=True)\nclass BuyerInfo(EmbeddedDocument):\n    Name = StringField(default=None)\n    Email = StringField(default=None)\n    Address = DictField(default=None)\nclass OrderItems(Document):\n    OrderId = StringField()\n    Platform = StringField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "BuyerInfo",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class BuyerInfo(EmbeddedDocument):\n    Name = StringField(default=None)\n    Email = StringField(default=None)\n    Address = DictField(default=None)\nclass OrderItems(Document):\n    OrderId = StringField()\n    Platform = StringField()\n    ProductDetails = EmbeddedDocumentField(ProductDetails, )\n    Pricing = EmbeddedDocumentField(Pricing, )\n    Fulfillment = EmbeddedDocumentField(Fulfillment, default=None)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "OrderItems",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class OrderItems(Document):\n    OrderId = StringField()\n    Platform = StringField()\n    ProductDetails = EmbeddedDocumentField(ProductDetails, )\n    Pricing = EmbeddedDocumentField(Pricing, )\n    Fulfillment = EmbeddedDocumentField(Fulfillment, default=None)\n    OrderStatus = EmbeddedDocumentField(OrderStatus, default=None)\n    TaxCollection = EmbeddedDocumentField(TaxCollection, )\n    IsGift = BooleanField()\n    BuyerInfo = EmbeddedDocumentField(BuyerInfo, default=None)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Order(Document):\n    # Tracking IDs\n    purchase_order_id = StringField()  # ID generated after a customer orders a product\n    customer_order_id = StringField()  # ID from the customer's perspective for tracking\n    seller_order_id = StringField()  # ID used by the seller for internal purposes\n    merchant_order_id = StringField()  # ID used by the merchant for internal purposes\n    # Customer details\n    customer_email_id = StringField()  # Email of the customer\n    # Order timing\n    order_date = DateTimeField()  # Date when the order was placed",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "product_details",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class product_details(EmbeddedDocument):\n    product_id = ReferenceField(Product)\n    title = StringField(required=True)\n    sku = StringField(required=True)\n    unit_price = FloatField()\n    quantity = IntField()\n    quantity_price = FloatField()\nclass custom_order(Document):\n    # Order details\n    order_id = StringField()  # Internal order ID",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "custom_order",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class custom_order(Document):\n    # Order details\n    order_id = StringField()  # Internal order ID\n    customer_order_id = StringField()  # ID from the customer's perspective for tracking\n    ordered_products = ListField(EmbeddedDocumentField(product_details))  # List of product names\n    total_quantity = IntField()\n    total_price = FloatField()\n    currency = StringField()\n    shipment_type = StringField()  # e.g., \"Standard\", \"Express\"\n    channel = StringField()  # e.g., \"Amazon\", \"Shopify\"",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "authenticated_api",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class authenticated_api(Document):\n    name = StringField()\n    allowed_roles = ListField(ReferenceField(role))\nclass CityDetails(Document):\n    city = StringField(max_length=100)\n    city_ascii = StringField(max_length=100)\n    state_id = StringField(max_length=10)\n    state_name = StringField(max_length=100)\n    county_fips = StringField(max_length=20)\n    county_name = StringField(max_length=100)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "CityDetails",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class CityDetails(Document):\n    city = StringField(max_length=100)\n    city_ascii = StringField(max_length=100)\n    state_id = StringField(max_length=10)\n    state_name = StringField(max_length=100)\n    county_fips = StringField(max_length=20)\n    county_name = StringField(max_length=100)\n    lat = FloatField()\n    lng = FloatField()\n    population = IntField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "chooseMatrix",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class chooseMatrix(Document):\n    name = StringField(max_length=100)\n    select_all =  BooleanField()\n    gross_revenue =  BooleanField()\n    units_sold =  BooleanField()\n    acos =  BooleanField()\n    tacos =  BooleanField()\n    refund_quantity =  BooleanField()\n    net_profit =  BooleanField()\n    profit_margin =  BooleanField()",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "notes_data",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class notes_data(Document):\n    product_id = ReferenceField(Product)\n    date_f = DateTimeField(default=datetime.now())\n    notes = StringField()\n    user_id = ReferenceField(user)\nclass Fee(Document):\n    marketplace = StringField()\n    fee_type = StringField()\n    amount = FloatField()\n    date =  DateTimeField(default=datetime.now())",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Fee",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Fee(Document):\n    marketplace = StringField()\n    fee_type = StringField()\n    amount = FloatField()\n    date =  DateTimeField(default=datetime.now())\nclass Refund(Document):\n    product_id = ReferenceField(Product)\n    date =  DateTimeField(default=datetime.now())\n    reason  = StringField()\nclass pageview_session_count(Document):",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "Refund",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class Refund(Document):\n    product_id = ReferenceField(Product)\n    date =  DateTimeField(default=datetime.now())\n    reason  = StringField()\nclass pageview_session_count(Document):\n    product_id = ListField(ReferenceField(Product), default=[])\n    date = DateTimeField(default=datetime.now())\n    page_views = IntField(default=0)\n    session_count = IntField(default=0)\n    # Additional fields based on the provided dictionary",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "pageview_session_count",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class pageview_session_count(Document):\n    product_id = ListField(ReferenceField(Product), default=[])\n    date = DateTimeField(default=datetime.now())\n    page_views = IntField(default=0)\n    session_count = IntField(default=0)\n    # Additional fields based on the provided dictionary\n    asin = StringField()\n    # Sales by ASIN\n    units_ordered = IntField(default=0)\n    units_ordered_b2b = IntField(default=0)",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "inventry_log",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class inventry_log(Document):\n    date = DateTimeField(default=datetime.now())\n    product_id = ReferenceField(Product)\n    available = IntField(default=0)\n    reserved = IntField(default=0)\nclass productPriceChange(Document):\n    product_id = ReferenceField(Product)\n    old_price = FloatField(default=0.0)\n    new_price = FloatField(default=0.0)\n    change_date = DateTimeField(default=datetime.now())",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "productPriceChange",
        "kind": 6,
        "importPath": "ecommerce_tool.omnisight.models",
        "description": "ecommerce_tool.omnisight.models",
        "peekOfCode": "class productPriceChange(Document):\n    product_id = ReferenceField(Product)\n    old_price = FloatField(default=0.0)\n    new_price = FloatField(default=0.0)\n    change_date = DateTimeField(default=datetime.now())\n    reason = StringField(default=\"Price update\")",
        "detail": "ecommerce_tool.omnisight.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce_tool.omnisight.urls",
        "description": "ecommerce_tool.omnisight.urls",
        "peekOfCode": "urlpatterns = [\n    #General Urls\n    path('checkEmailExistOrNot/', checkEmailExistOrNot, name='checkEmailExistOrNot'),\n    path('signupUser/', signupUser, name='signupUser'),\n    path('loginUser/', loginUser, name='loginUser'),\n    path('forgotPassword/',forgotPassword,name=\"forgotPassword\"),\n    path('changePassword/',changePassword,name=\"changePassword\"),\n    # path('fetchAllorders1/',fetchAllorders1,name=\"fetchAllorders1\"),\n    path('updatedRevenueWidgetAPIView/', updatedRevenueWidgetAPIView, name='updatedRevenueWidgetAPIView'),\n    path('updateProductDetails/', updateProductDetails, name='updateProductDetails'),",
        "detail": "ecommerce_tool.omnisight.urls",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ecommerce_tool.manage",
        "description": "ecommerce_tool.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "ecommerce_tool.manage",
        "documentation": {}
    }
]